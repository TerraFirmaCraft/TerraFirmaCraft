import groovy.json.JsonOutput
import groovy.json.JsonSlurper

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://dist.creeper.host/Sponge/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'net.minecrell.licenser' version '0.4.1'
    id 'idea'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

/*
 * !! Important Info for Contributors !!
 *
 * This project uses Mappificator (https://github.com/alcatrazEscapee/mappificator) for its mappings. This is a tool based on the official mappings provided by Mojang.
 * For information on how to set that up, see the project's README.md, it should detail how to create a customized mapping set and publish it to your maven local for use by FG.
 * While mappificator is recommended as it adds comments and parameter names to the standard official mappings, it is by no means necessary.
 * If you wish to use standard official mappings, see the below instructions to add the "use_official_mappings" property to your local dev.gradle
 *
 * This will create (if it does not exist) and use a 'dev.gradle' file in the root directory of this project.
 * It is used to set various property overrides in one's local development environment, without having to edit this file.
 * local.gradle should resemble the following:
 *
 * // In dev.gradle
 * ext {
 *     property_name = "a property value"
 *     another_property = true
 * }
 *
 * Important properties can can be configured in this manner:
 * use_official_mappings = true
 *  - This will tell gradle to use the official mappings for the purposes of mapping Minecraft source code. Using this option DOES NOT require setting up Mappificator. It WILL NOT de-obfuscate parameter names, or apply comments to the Minecraft source.
 */

def localProperties = new File('./dev.gradle')
localProperties.createNewFile()

apply from: 'dev.gradle'

def envVersion = System.getenv("version")
version = envVersion == null ? "dev" : envVersion

def mappingsOfficial = (project.hasProperty('use_official_mappings') && Boolean.valueOf(use_official_mappings)) ||
        System.getenv("USE_OFFICIAL_MAPPINGS") != null || // Detect in an actions buildscript
        System.getenv("JITPACK") != null // Detect in a jitpack publishing environment
def mappingsChannel = mappingsOfficial ? 'official' : 'snapshot'
def mappingsVersion = mappingsOfficial ? minecraft_version : mappings_version

println 'Using mappings: ' + mappingsChannel + ' / ' + mappingsVersion

group = "net.dries007.tfc" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "TerraFirmaCraft-Forge-${minecraft_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name 'Jitpack' // Used by mcjunitlib
        url 'https://jitpack.io'
    }
}

minecraft {
    mappings channel: mappingsChannel, version: mappingsVersion
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    def testClasses = String.join(File.pathSeparator, "${mod_id}%%${sourceSets.main.output.resourcesDir}", "${mod_id}%%${sourceSets.main.output.classesDirs.asPath}", "${mod_id}%%${sourceSets.test.output.resourcesDir}", "${mod_id}%%${sourceSets.test.output.classesDirs.asPath}")

    runs {
        client {
            workingDirectory project.file('run')
            arg '-mixin.config=' + mod_id + '.mixins.json'
            property 'forge.logging.console.level', 'debug'

            mods {
                tfc {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg '-mixin.config=' + mod_id + '.mixins.json'
            arg '--nogui'
            property 'forge.logging.console.level', 'debug'

            mods {
                tfc {
                    source sourceSets.main
                }
            }
        }

        integrationTest {
            parent runs.client
            workingDirectory project.file('run')
            ideaModule "${project.name}.test"
            property 'forge.logging.console.level', 'debug' // This logging level prevents any other server information messages and leaves only the unit test output
            environment 'MOD_CLASSES', testClasses // Forge will ignore all test sources unless we explicitly tell it to include them as mod sources
            mods {
                tfc {
                    sources sourceSets.main, sourceSets.test
                }
            }
        }

        unitTest {
            parent runs.server // This run config inherits settings from the server config
            workingDirectory project.file('run')
            main 'com.alcatrazescapee.mcjunitlib.DedicatedTestServerLauncher' // The main class which launches a customized server which then runs JUnit tests
            ideaModule "${project.name}.test" // Tell IDEA to use the classpath of the test module
            property 'forge.logging.console.level', 'unittest' // This logging level prevents any other server information messages and leaves only the unit test output
            environment 'MOD_CLASSES', testClasses // Forge will ignore all test sources unless we explicitly tell it to include them as mod sources
            environment 'target', 'fmltestserver' // This is a custom service used to launch with ModLauncher's transforming class loader
            mods {
                tfc {
                    sources sourceSets.main, sourceSets.test
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    testImplementation fg.deobf("com.github.alcatrazEscapee:mcjunitlib:${mcjunitlib_version}-${minecraft_version}")
}

processResources {
    // Minify the json files in the output jar, reduces overall jar size.
    // Also removes comments from mcresources, as they don't need to be included
    doLast {
        fileTree(dir: outputs.files.asPath, include: "**/*.json").each { File file ->
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            file.text = file.text.replace('"__comment__":"This file was automatically created by mcresources",', '')
        }
    }
}

// Automatically apply a license header when running checkLicense / updateLicense
license {
    header = project.file('HEADER.txt')

    include '**/*.java'

    // Fast Noise
    exclude 'net/dries007/tfc/world/noise/Cellular2D.java'
    exclude 'net/dries007/tfc/world/noise/Cellular3D.java'
    exclude 'net/dries007/tfc/world/noise/NoiseUtil.java'
    exclude 'net/dries007/tfc/world/noise/OpenSimplex2D.java'
    exclude 'net/dries007/tfc/world/noise/OpenSimplex3D.java'
}

// Puts the mod version into the jar for mods.toml to read from
jar {
    manifest {
        attributes ([
                "Implementation-Version": "${version}",
                "MixinConfigs": "${mod_id}.mixins.json"
        ])
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
}