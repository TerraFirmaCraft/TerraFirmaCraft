import groovy.json.JsonOutput
import groovy.json.JsonSlurper

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven {
            url "https://repo.spongepowered.org/repository/maven-public/"
            content { includeGroup "org.spongepowered" }
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'idea'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

def localProperties = new File('./dev.gradle')
localProperties.createNewFile()

apply from: 'dev.gradle'

// These properties can all be customized from dev.gradle
def mappingsChannel = project.hasProperty('mappings_channel') ? mappings_channel : 'official'
def mappingsVersion = project.hasProperty('mappings_version') ? mappings_version : minecraft_version
def minifyResources = project.hasProperty("minify_resources") ? minify_resources : true

println "Using mappings: " + mappingsChannel + " / " + mappingsVersion

group = "net.dries007.tfc" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "TerraFirmaCraft-Forge-${minecraft_version}"

// Use version from environment variable, if set
def envVersion = System.getenv('VERSION')
version = envVersion == null ? 'indev' : envVersion
java.toolchain.languageVersion = JavaLanguageVersion.of(17)


sourceSets {
    test
    main {
        runtimeClasspath += sourceSets.test.output
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        // JEI
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // Mirror for JEI
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        // Cyanide
        url = 'https://alcatrazescapee.jfrog.io/artifactory/mods'
    }
    flatDir {
        dirs 'libs'
    }
}

minecraft {
    mappings channel: mappingsChannel, version: mappingsVersion
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            args '-mixin.config=' + mod_id + '.mixins.json'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.enabledGameTestNamespaces', mod_id
            jvmArgs '-ea', '-Xmx4G', '-Xms4G'

            mods {
                tfc {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }

        server {
            workingDirectory project.file('run')
            args '-mixin.config=' + mod_id + '.mixins.json', '--nogui'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.enabledGameTestNamespaces', mod_id
            jvmArgs '-ea', '-Xmx4G', '-Xms4G'

            mods {
                tfc {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run/gametest')
            args '-mixin.config=' + mod_id + '.mixins.json', '--nogui'
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.enabledGameTestNamespaces', mod_id
            jvmArgs '-ea', '-Xmx4G', '-Xms4G'

            forceExit false

            mods {
                tfc {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    //runtimeOnly fg.deobf("com.alcatrazescapee:cyanide-forge-1.18:2.0.3") { transitive = false }
    // runtimeOnly fg.deobf("libs:journeymap-1.17.1:5.7.3rc3") // File: libs/journey,ap-1.17.1-5.7.3rc3.jar
    // runtimeOnly fg.deobf("libs:panorama:1.2.0") // File: libs/panorama-1.2.0.jar

    // JEI
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    }

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

test {
    useJUnitPlatform()
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

processResources {
    if (minifyResources) {
        doLast {
            def jsonMinifyStart = System.currentTimeMillis()
            def jsonMinified = 0
            def jsonBytesBefore = 0, jsonBytesAfter = 0;
            fileTree(dir: outputs.files.asPath, include: "**/*.json").each { File file ->
                jsonMinified++
                def oldLength = file.length()
                try {
                    file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
                        .replace('"__comment__":"This file was automatically created by mcresources",', '')
                }
                catch(Exception e ){
                    System.out.println("Parsing JSON error in " + file.path)
                    throw e
                }
                jsonBytesBefore += oldLength;
                jsonBytesAfter += file.length();
            }
            println('Minified ' + jsonMinified + ' json files. Reduced ' + (int) (jsonBytesBefore / 1024) + ' kB to ' + (int) (jsonBytesAfter / 1024) + ' kB (' + (String.format('%.2f', 100f * jsonBytesAfter / jsonBytesBefore)) + '%). Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
        }
    }
}

idea {
    module {
        excludeDirs.add(file("run"))
    }
}


// Automatically apply a license header when running checkLicense / updateLicense
license {
    header = project.file('HEADER.txt')

    include '**/*.java'

    exclude 'net/dries007/tfc/world/noise/FastNoiseLite.java' // Fast Noise
}


// Puts the mod version into the jar for mods.toml to read from
jar {
    manifest {
        attributes ([
                "Implementation-Version": "${project.version}",
                "MixinConfigs": "${mod_id}.mixins.json"
        ])
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    add sourceSets.test, "${mod_id}.refmap.json"
}
