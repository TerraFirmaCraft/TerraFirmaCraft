import groovy.json.JsonOutput
import groovy.json.JsonSlurper

buildscript {
    repositories {
        maven {
            url = 'https://maven.minecraftforge.net'
        }
        maven {
            url "https://repo.spongepowered.org/repository/maven-public/"
            content { includeGroup "org.spongepowered" }
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'net.minecrell.licenser' version '0.4.1'
    id 'idea'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

def localProperties = new File('./dev.gradle')
localProperties.createNewFile()

apply from: 'dev.gradle'

// These properties can all be customized from dev.gradle
def mappingsChannel = project.hasProperty('mappings_channel') ? mappings_channel : 'official'
def mappingsVersion = project.hasProperty('mappings_version') ? mappings_version : minecraft_version
def minifyResources = project.hasProperty("minify_resources") ? minify_resources : true

println "Using mappings: " + mappingsChannel + " / " + mappingsVersion

group = "net.dries007.tfc" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "TerraFirmaCraft-Forge-${minecraft_version}"

// Use version from environment variable, if set
def envVersion = System.getenv('VERSION')
version = envVersion == null ? 'indev' : envVersion

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = JavaVersion.VERSION_1_8 // Need this here so eclipse task generates correctly.

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name 'Jitpack' // Used by mcjunitlib
        url 'https://jitpack.io'
    }
    maven {
        name 'Blame'
        url "https://nexus.resourcefulbees.com/repository/maven-public/"
    }
}

minecraft {
    mappings channel: mappingsChannel, version: mappingsVersion
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            args '-mixin.config=' + mod_id + '.mixins.json'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                tfc {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            args '-mixin.config=' + mod_id + '.mixins.json', '--nogui'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                tfc {
                    source sourceSets.main
                }
            }
        }

        serverTest {
            parent runs.server
            workingDirectory project.file('run')
            main 'com.alcatrazescapee.mcjunitlib.DedicatedTestServerLauncher'
            ideaModule "${project.name}.test"
            property 'forge.logging.console.level', 'unittest'
            environment 'MOD_CLASSES', String.join(File.pathSeparator, "${mod_id}%%${sourceSets.main.output.resourcesDir}", "${mod_id}%%${sourceSets.main.output.classesDirs.asPath}", "${mod_id}%%${sourceSets.test.output.resourcesDir}", "${mod_id}%%${sourceSets.test.output.classesDirs.asPath}")
            environment 'target', 'fmltestserver'
            environment 'targetModId', "${mod_id}"
            args '-mixin.config=' + mod_id + '.mixins.json', '--crashOnFailedTests'
            forceExit false
            mods {
                tfc {
                    sources sourceSets.main, sourceSets.test
                }
            }
        }

        serverTestDebug {
            parent runs.serverTest
            property 'forge.logging.console.level', 'debug'
            args '-mixin.config=' + mod_id + '.mixins.json'
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Add Blame, useful for running certain diagnostics
    runtimeOnly fg.deobf("com.telepathicgrunt:Blame:${blame_version}")

    testImplementation fg.deobf("com.github.alcatrazEscapee:mcjunitlib:${mcjunitlib_version}-${minecraft_version}")

    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    }
}

processResources {
    if (minifyResources) {
        doLast {
            fileTree(dir: outputs.files.asPath, include: "**/*.json").each { File file ->
                file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
                file.text = file.text.replace('"__comment__":"This file was automatically created by mcresources",', '')
            }
        }
    }
}

// Automatically apply a license header when running checkLicense / updateLicense
license {
    header = project.file('HEADER.txt')

    include '**/*.java'

    // Fast Noise
    exclude 'net/dries007/tfc/world/noise/Cellular2D.java'
    exclude 'net/dries007/tfc/world/noise/Cellular3D.java'
    exclude 'net/dries007/tfc/world/noise/NoiseUtil.java'
    exclude 'net/dries007/tfc/world/noise/OpenSimplex2D.java'
    exclude 'net/dries007/tfc/world/noise/OpenSimplex3D.java'

    // From Overworld Two
    exclude 'net/dries007/tfc/world/biome/BiomeCache.java'
}

// Puts the mod version into the jar for mods.toml to read from
jar {
    manifest {
        attributes ([
                "Implementation-Version": "${version}",
                "MixinConfigs": "${mod_id}.mixins.json"
        ])
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
}